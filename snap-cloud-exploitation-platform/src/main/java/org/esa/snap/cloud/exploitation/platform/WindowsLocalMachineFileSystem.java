package org.esa.snap.cloud.exploitation.platform;

import org.apache.commons.lang.StringUtils;
import org.esa.snap.cloud.exploitation.platform.executors.OutputConsoleBuffer;
import org.esa.snap.cloud.exploitation.platform.executors.ProcessExecutor;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by jcoravu on 13/3/2019.
 */
public class WindowsLocalMachineFileSystem implements ILocalMachineFileSystem {

    private static final Logger logger = Logger.getLogger(WindowsLocalMachineFileSystem.class.getName());

    public WindowsLocalMachineFileSystem() {
    }

    @Override
    public char getFileSeparator() {
        return '\\';
    }

    @Override
    public String normalizeFileSeparator(String path) {
        return normalizeWindowsPath(path);
    }

    @Override
    public boolean pathStartsWith(String path, String prefix) {
        return StringUtils.startsWithIgnoreCase(path, prefix);
    }

    @Override
    public String findPhysicalSharedFolderPath(String shareName) {
        try {
            String command = "net share " + shareName;
            OutputConsoleBuffer outputConsole = new OutputConsoleBuffer();
            int exitStatus = ProcessExecutor.executeWindowsCommand(command, null, outputConsole);
            if (exitStatus == 0) {
                String[] normalOutput = outputConsole.getNormalStreamMessages().split("\n");
                String key = "Path ";
                String pathLine = null;
                for (int i=0; i<normalOutput.length && pathLine == null; i++) {
                    if (normalOutput[i].startsWith(key)) {
                        return normalOutput[i].substring(key.length()).trim();
                    }
                }
            }
        } catch (IOException exception) {
            logger.log(Level.SEVERE, "Failed to process the local source products.", exception);
        }
        return null;
    }

    public static String normalizeWindowsPath(String path) {
        return path.replace('/', '\\');
    }
}
