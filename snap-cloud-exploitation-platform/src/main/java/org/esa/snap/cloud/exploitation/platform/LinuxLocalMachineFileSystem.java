package org.esa.snap.cloud.exploitation.platform;

import org.esa.snap.cloud.exploitation.platform.executors.OutputConsoleBuffer;
import org.esa.snap.cloud.exploitation.platform.executors.ProcessExecutor;

import java.io.IOException;

public class LinuxLocalMachineFileSystem extends UnixLocalMachineFileSystem {

    public LinuxLocalMachineFileSystem() {
        super();
    }

    @Override
    public String findPhysicalSharedFolderPath(String shareNameToFind, String localPassword) throws IOException {
        String sambaUserSharesFolderPath = "/var/lib/samba/usershares";

        String command = "ls -F " + sambaUserSharesFolderPath;
        OutputConsoleBuffer outputConsole = new OutputConsoleBuffer();
        int exitStatus = ProcessExecutor.executeUnixCommand(command, localPassword, null, outputConsole);
        if (exitStatus == 0) {
            String[] filesAndFolders = outputConsole.getNormalStreamMessages().split(OutputConsoleBuffer.MESSAGE_SEPARATOR);
            for (int i = 0; i < filesAndFolders.length; i++) {
                if (!filesAndFolders[i].endsWith("/")) {
                    String physicalSharedFolderPath = checkPhysicalSharedFolderPathInFile(shareNameToFind, localPassword, sambaUserSharesFolderPath, filesAndFolders[i]);
                    if (physicalSharedFolderPath != null) {
                        return physicalSharedFolderPath;
                    }
                }
            }
        }

        return null;
    }

    private static String checkPhysicalSharedFolderPathInFile(String shareNameToFind, String localPassword,
                                                              String sambaUserSharesFolderPath, String fileNameToCheck)
                                                              throws IOException {

        String command = "cat " + sambaUserSharesFolderPath + "/" + fileNameToCheck;
        OutputConsoleBuffer outputConsole = new OutputConsoleBuffer();
        int exitStatus = ProcessExecutor.executeUnixCommand(command, localPassword, null, outputConsole);
        if (exitStatus == 0) {
            System.out.println(outputConsole.getNormalStreamMessages());
            String[] fileLines = outputConsole.getNormalStreamMessages().split(OutputConsoleBuffer.MESSAGE_SEPARATOR);
            String pathLine = null;
            String shareNameLine = null;

            String pathKey = "path";
            String pathKeyEqual = pathKey + "=";
            String pathKeySpace = pathKey + " ";

            String shareNameKey = "sharename";
            String shareNameKeyEqual = shareNameKey + "=";
            String shareNameKeySpace = shareNameKey + " ";

            for (int i=0; i<fileLines.length; i++) {
                String line = fileLines[i].trim();
                if (line.startsWith(pathKeyEqual) || line.startsWith(pathKeySpace)) {
                    pathLine = line;
                } else if (line.startsWith(shareNameKeyEqual) || line.startsWith(shareNameKeySpace)) {
                    shareNameLine = line;
                }
                if (shareNameLine != null && pathLine != null) {
                    String shareNameValue = extractPropertyValueFromLine(shareNameLine, shareNameKey);
                    if (shareNameValue.equals(shareNameToFind)) {
                        return extractPropertyValueFromLine(pathLine, pathKey);
                    }
                    break;
                }
            }
        }

        return null;
    }

    private static String extractPropertyValueFromLine(String fileContentLine, String propertyKey) {
        int equalIndex = fileContentLine.indexOf('=', propertyKey.length());
        if (equalIndex >= propertyKey.length()) {
            return fileContentLine.substring(equalIndex + 1).trim();
        }
        return null;
    }
}
